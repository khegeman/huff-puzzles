/** 
* SUM_ARRAY HUFF EXERCISE
*
* In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
*   - Push numbers onto a array, 
*   - Pop the last index from the array,
*   - View what's stored at an index, 
*   - Gets the length of the array, 
*   - Write to an index if it is valid.
*
*   - Writes and reads outside of length revert. 
*   - Popping off a zero length array reverts.
*
* NOTICE: The contract should revert when an unrecognized function is called
*/


#define function pushh(uint256 num) payable returns()
#define function popp() payable returns()
#define function read(uint256 index) payable returns(uint256)
#define function length() payable returns(uint256)
#define function write(uint256 index, uint256 num) payable returns()

#define error OutOfBounds()
#define error ZeroArray()

//slot 0 is length p
//slot 1 is element 0 


#define macro POP() = takes (0) returns (0) {
  0x00 sload    //[length]
  dup1
  iszero 
  zero jumpi

  //subtract 1 from size and store it back in slot 0
  0x01 swap1 sub 0x00 sstore

  stop        // []

zero:
    __ERROR(ZeroArray)   // [OnlyHuff_selector]
    0x00 mstore          
    0x04 0x00 revert
}

#define macro PUSH() = takes (0) returns (0) {

  // Setup the stack for the mint function.
  0x04 calldataload  // [value]
  0x00 sload         // [length, value]  
  0x01 add           // [newlength, value]
  dup1               // [newlength, newlength, value]
  0x00 sstore        // [newlength, value]
  sstore             // []

  stop        // []
}

#define macro READ() = takes (0) returns (0) {

  // Setup the stack for the mint function.
  0x04 calldataload  // [index]
  dup1
  0x00 sload         //[length,index, index]
  gt 
  read jumpi        // [index]

    __ERROR(OutOfBounds)  
    0x00 mstore          
    0x04 0x00 revert

read:
                   // [index]
  0x01 add sload   // [value]
  0x00 mstore

  0x20 0x00 return
  stop        // []
}

#define macro WRITE() = takes (0) returns (0) {

  // Setup the stack for the mint function.
  0x24 calldataload  // [num]
  0x04 calldataload  // [index, num]
  dup1        // [index, index, num]

  //is index valid ? 
  0x00 sload     // [length ,index, index, num]
  gt write1 jumpi 

    __ERROR(OutOfBounds)   
    0x00 mstore          
    0x04 0x00 revert
write1:
   //[index, num]
   0x01 add   //[slot, num]
  sstore
  stop        // []
}

#define macro LENGTH() = takes (0) returns (0) {
  
  0x00 sload 
  0x00 mstore

  0x20 0x00 return

}

#define macro MAIN() = takes(0) returns(0) {
  
  pc calldataload 0xE0 shr  // [sig]

  dup1 __FUNC_SIG(pushh) eq pushh jumpi
  dup1 __FUNC_SIG(popp) eq popp jumpi    
  dup1 __FUNC_SIG(read) eq read1 jumpi 
  dup1 __FUNC_SIG(length) eq length jumpi 
  dup1 __FUNC_SIG(write) eq write jumpi 


  // Revert if we don't recognize the function selector
  0x00 dup1 revert

  pushh:
    PUSH()
  popp:
    POP()
  read1:
    READ()
  length:
    LENGTH()
  write:
    WRITE()        
}