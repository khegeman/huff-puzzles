
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)


#define macro SUM() = takes (0) returns (1) {
    0x04 calldataload    // [offset]
    0x04 add             // [location]
    dup1
    calldataload         // [length, location]
    
    0x20 mul             // [size , location]
    swap1                // [location , size]
    dup1                 // [location ,location size]
    swap2                // [size ,location location]
    add                  // [end ,location]

    swap1                // [location, end]
    0x20 add             // [element1, end]
    
    0x00                 // [sum, element1, end]
    swap1                // [element1,sum,  end]
loop:
   dup1
    calldataload         // [number, element, sum , end]
    swap1                // [element , number, sum , end]
    swap2                // [sum , number, element , end]
    add                  // [sum , element , end]
    swap1                // [element , sum,  end]
    0x20 add             // [next_element , sum,  end]
    dup1                 // [next_element , next_element , sum,  end]
    swap3                // [end , next_element,  sum, next_element]
    dup1                 // [end , end , next_element,  sum, next_element]
    swap4                // [next_element , end , next_element,  sum,end]

    gt 
    //break loop 
    //after this statement, the stack is the same as it is at the top of the loop.
    ret jumpi           // [next_element ,  sum, end]

    //loop back to top
    loop jump
ret:  
                             //[next_element ,  sum, end]
    //clean up stack                             
    pop                      //[sum, end]
    swap1                    //[end, sum]
    pop                      //[sum]

    //[sum]
   




}

#define macro MAIN() = takes(0) returns(0) {

    // Get the function signature from the calldata
    0x00 calldataload        // [calldata @ 0x00]
    0xE0 shr                 // [func_sig (calldata @ 0x00 >> 0xE0)]


    __FUNC_SIG(sumArray)    
    eq                      
    sum jumpi           // []

    // Revert if no function signature matched
    0x00 0x00 revert

    // Create a jump label
    sum:
        // Call the `ADD_WORD` macro with the first calldata
        // input, store the result in memory, and return it.
        
        SUM()           // [result]
        0x00 mstore          // []
        0x20 0x00 return

}